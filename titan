#!/usr/bin/env python3

import sys
import argparse
import subprocess
import os
import shutil
import struct

def CreateRamdisk(args):
    if not args.file or len(args.file) <= 0:
        raise ValueError("No files specified")

    SUPERBLOCK_SIZE = 0x10
    FILE_ENTRY_SIZE = 0x30
    # "STFS" in little-endian, so actually "SFTS"
    SIGNATURE = 0x53465453

    file_entries = []
    file_data = b''
    current_offset = SUPERBLOCK_SIZE + (FILE_ENTRY_SIZE * len(args.file))

    for path in args.file:
        filename = os.path.basename(path).encode('utf-8')
        if len(filename) > 32:
            raise ValueError(f"Filename too long: {filename}")

        with open(path, 'rb') as f:
            contents = f.read()

        padded_name = filename.ljust(32, b'\x00')
        size = len(contents)

        file_entries.append((padded_name, size, current_offset))
        file_data += contents
        current_offset += size

    with open("esp/Supernova/ramdisk", 'wb') as out:
        out.write(struct.pack('<I', SIGNATURE))
        out.write(struct.pack('<I', 0))
        out.write(struct.pack('<Q', len(args.file)))

        for name, size, offset in file_entries:
            out.write(name)
            out.write(struct.pack('<Q', size))
            out.write(struct.pack('<Q', offset))

        out.write(file_data)

    print(f"Created ramdisk: esp/Supernova/ramdisk, with file(s): {", ".join(args.file)}")

def Compile(args):
    if not args.only_kernel:
        print("Compiling the bootloader...")
        subprocess.run(["make", "-C", "Bootloader", f"MODE={"-O2 -DSN_RELEASE" if args.release else "-O0 -g -DSN_DEBUG"}"], check=True)

    if not args.only_bootloader:
        print("Compiling the kernel...")
        subprocess.run(["make", "-C", "Kernel", f"MODE={"-O2 -DSK_RELEASE" if args.release else "-O0 -g -DSK_DEBUG"}"], check=True)

def PrepareDiskFolders():
    print("Preparing mappe disks...")

    os.makedirs("esp/efi/boot", exist_ok=True)
    os.makedirs("esp/Supernova", exist_ok=True)

    if not os.path.exists("sata.img"):
        subprocess.run(["dd", "if=/dev/zero", "of=sata.img", "bs=1M", "count=1024"], check=True)

    shutil.copy("Bootloader/Output/bootx64.efi", "esp/efi/boot/")
    shutil.copy("Kernel/Output/Kernel.elf", "esp/Supernova/")

def Run(args):
    command = [
        args.with_qemu,
        "-drive",
        f"if=pflash,format=raw,readonly=on,file={args.with_ovmf_code}",
        "-drive",
        f"if=pflash,format=raw,readonly=on,file={args.with_ovmf_vars}",
        "-machine",
        "q35",
        "-serial",
        "stdio",
        "-drive",
        "format=raw,file=fat:rw:esp",
        "-drive",
        "format=raw,if=none,id=sata,file=sata.img",
        "-device",
        "ahci,id=ahci",
        "-device",
        "ide-hd,drive=sata,bus=ahci.0"
    ]

    if args.remote_gdb:
        command += ["-s", "-S"]

    if args.enable_kvm:
        command += ["-enable-kvm"]

    print("Starting QEMU...")
    subprocess.run(command)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog=sys.argv[0], description="SaturnOS's utility build script.")

    subparsers = parser.add_subparsers(dest="command", title="Commands")

    build = subparsers.add_parser("build", aliases=["b"], help="compiles the entire operating system")
    
    run = subparsers.add_parser("run", aliases=["r"], help="runs the operating system using QEMU")

    ramdisk = subparsers.add_parser("ramdisk-create", aliases=["rc"], help="creates a ramdisk file with the specified files")

    ramdisk.add_argument("-f", "--file", action="append", help="adds a file to the ramdisk")

    build.add_argument("-r", "--release", action="store_true", help="enables optimizations and doesn't include debug symbols")
    run.add_argument("-r", "--release", action="store_true", help="enables optimizations and doesn't include debug symbols")

    build.add_argument("--only-kernel", action="store_true", help="invokes the Makefile only in the kernel's folder")
    run.add_argument("--only-kernel", action="store_true", help="invokes the Makefile only in the kernel's folder")

    build.add_argument("--only-bootloader", action="store_true", help="invokes the Makefile only in the bootloader's folder")
    run.add_argument("--only-bootloader", action="store_true", help="invokes the Makefile only in the bootloader's folder")
    
    run.add_argument("--with-qemu", default="qemu-system-x86_64", metavar="<binary>",
                     help="uses the given binary instead of the default qemu-system-x86_64")

    run.add_argument("--with-ovmf-code", metavar="<path>", default="/opt/OVMF/OVMF_CODE.fd",
                               help="uses the given OVMF code binary instead of the default /opt/OVMF/OVMF_CODE.fd")

    run.add_argument("--with-ovmf-vars", metavar="<path>", default="/opt/OVMF/OVMF_VARS.fd",
                               help="uses the given OVMF vars binary instead of the default /opt/OVMF/OVMF_VARS.fd")

    run.add_argument("--enable-kvm", action="store_true", help="enables KVM in QEMU")
    run.add_argument("--remote-gdb", action="store_true", help="enables remote QEMU GDB debugging")

    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)

    args = parser.parse_args()

    match args.command:
        case "build":
            Compile(args)
            PrepareDiskFolders()
        case "run":
            Compile(args)
            PrepareDiskFolders()
            Run(args)
        case "ramdisk-create":
            CreateRamdisk(args)
