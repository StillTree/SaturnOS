#!/bin/bash

QEMU_BINARY="qemu-system-x86_64"
RELEASE=false
BUILD_KERNEL=true
BUILD_BOOTLOADER=true
ENABLE_KVM=""
ACTION=""
OVMF_CODE_LOCATION="/opt/OVMF/OVMF_CODE.fd"
OVMF_VARS_LOCATION="/opt/OVMF/OVMF_VARS.fd"
MODE_BOOTLOADER="-O0 -g -DSN_DEBUG"
MODE_KERNEL="-O0 -g -DSK_DEBUG"

function PrintUsage()
{
	echo "SaturnOS's build script."
	echo
	echo "Usage: $0 [command] [options]"
	echo
	echo "Commands:"
	echo "	build, b    Compiles the entire operating system"
	echo "	run, r      Runs the operating system using QEMU"
	echo "	clean, c    Removes the target directories and disk folders"
	echo
	echo "Options:"
	echo "	-r, --release               Enables optimizations and doesn't include debug symbols"
	echo "	--only-kernel               Invokes the Makefile only in the kernel's folder"
	echo "	--only-bootloader           Invokes the Makefile only in the bootloader's folder"
	echo "	--with-qemu <binary>        Uses the given binary instead of the default qemu-system-x86_64"
	echo "	--with-ovmf-code <path>     Uses the given OVMF code binary instead of the default /opt/OVMF/OVMF_CODE.fd"
	echo "	--with-ovmf-vars <path>     Uses the given OVMF vars binary instead of the default /opt/OVMF/OVMF_VARS.fd"
	echo "	--enable-kvm                Enables KVM in QEMU"
	echo "	-h, --help                  Prints help information"
}

if [[ $# -le 0 ]]; then
	PrintUsage
	exit 0
fi

while [[ $# -gt 0 ]]; do
	case $1 in
		build|b)
			ACTION="build"
			shift
			;;
		run|r)
			ACTION="run"
			shift
			;;
		clean|c)
			ACTION="clean"
			shift
			;;
		-r|--release)
			MODE_BOOTLOADER="-O2 -DSN_RELEASE"
			MODE_KERNEL="-O2 -DSK_RELEASE"
			shift
			;;
		--only-kernel)
			BUILD_BOOTLOADER=false
			shift
			;;
		--only-bootloader)
			BUILD_KERNEL=false
			shift
			;;
		--with-qemu)
			QEMU_BINARY=$2
			shift 2
			;;
		--enable-kvm)
			ENABLE_KVM="-enable-kvm"
			shift
			;;
		--with-ovmf-code)
			OVMF_CODE_LOCATION=$2
			shift 2
			;;
		--with-ovmf-vars)
			OVMF_VARS_LOCATION=$2
			shift 2
			;;
		-h|--help)
			PrintUsage
			exit
			;;
		*)
			echo "Unknown option: $1"
			PrintUsage
			exit 1
			;;
	esac
done

if [[ -z "$ACTION" ]]; then
	echo "Error: missing command"
	exit 1
fi

if [[ -n "$ENABLE_KVM" ]]; then
	ARCH=$(uname -m)
	if [[ "$OSTYPE" != "linux-gnu"* ]] && [[ "$ARCH" != "x86_64" ]]; then
		echo "Error: KVM unsupported on current OS"
		exit 1
	fi
fi

function PrepareDiskFolders()
{
	echo "Preparing folders to be mapped as disks..."

	mkdir -p esp/efi/boot/
	mkdir -p esp/Supernova/
	mkdir -p nvme/

	cp Bootloader/out/bootx64.efi esp/efi/boot/
	cp Kernel/out/Kernel.elf esp/Supernova/
}

function Compile()
{
	if [[ "$BUILD_BOOTLOADER" == "true" ]]; then
		echo "Compiling the bootloader..."
		make -C Bootloader MODE="$MODE_BOOTLOADER"
		if [ $? -ne 0 ]; then
			exit 1
		fi
	fi

	if [[ "$BUILD_KERNEL" == "true" ]]; then
		echo "Compiling the kernel..."
		make -C Kernel MODE="$MODE_KERNEL"
		if [ $? -ne 0 ]; then
			exit 1
		fi
	fi
}

function Run()
{
	echo "Starting QEMU..."
	$QEMU_BINARY \
		$ENABLE_KVM \
		-machine pc-q35-8.2 \
		-serial stdio \
		-drive if=pflash,format=raw,readonly=on,file=$OVMF_CODE_LOCATION \
		-drive if=pflash,format=raw,readonly=on,file=$OVMF_VARS_LOCATION \
		-drive format=raw,file=fat:rw:esp \
		-drive format=raw,if=none,id=nvm,file=fat:rw:nvme \
		-device nvme,serial=deadbeef,drive=nvm
}

function Clean()
{
	echo "Removing folders mapped as disks..."
	rm -rf esp
	rm -rf nvme

	echo "Cleaning the bootloader..."
	make clean -C Bootloader
	if [ $? -ne 0 ]; then
		exit 1
	fi

	echo "Cleaning the kernel..."
	make clean -C Kernel
	if [ $? -ne 0 ]; then
		exit 1
	fi
}

case $ACTION in
	build)
		Compile
		PrepareDiskFolders
		;;
	run)
		Compile
		PrepareDiskFolders
		Run
		;;
	clean)
		Clean
		;;
esac
